//结束的进程按结束时间离当前的时间的大小按升序排序
bool ReadProcess(Linklist_s Ls,Linklist_d Ld)
{
	//读取进程信息
	LNode_d *d;
	PROCESSENTRY32 pe32;
	d=(LNode_d *)malloc(sizeof(LNode_d));
	pe32.dwSize = sizeof(PROCESSENTRY32);
	HANDLE hProcessSnap, hProcess;
	PROCESS_MEMORY_COUNTERS pmc;
	hProcessSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if(hProcessSnap == INVALID_HANDLE_VALUE)
	{
		printf("createtoolhelp32snapshot调用失败！\n");
		return ERROR;
	}
	BOOL bMore  = Process32First(hProcessSnap, &pe32);
	while(bMore)
	{
		//开始向链表中读入数据
		pe32.dwSize = sizeof(pe32);
		strcpy(d->name,pe32.szExeFile);
	 // printf("%-20s\t%8d",pe32.szExeFile,pe32.th32ProcessID);
		hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, 
			FALSE, pe32.th32ProcessID);
		if(hProcess == NULL&&GetProcessMemoryInfo(hProcess, &pmc, sizeof(pmc)))
		{
			
		}
		if(GetProcessMemoryInfo(hProcess, &pmc, sizeof(pmc)))
		{
						//printf("%10dK\n",pmc.WorkingSetSize/1024);
			d->contain=pmc.WorkingSetSize/1024;
		}
		InsertLNode_d(Ld,d);
		CloseHandle(hProcess);	
		bMore = Process32Next(hProcessSnap, &pe32);
	}
	CloseHandle(hProcessSnap);
//	system("cls");
//Sleep(1000);
	return OK;
}